(require 'url)

(defun http/parse-headers (headers)
  (mapcar (lambda (h)
            (let* ((split (split-string h ": ")))
              (cons (car split) (mapconcat 'identity (cdr split) ": "))))
          (split-string headers "\n")))

(defun http/body-mode (headers)
  (let ((content-type (cdr (assoc "Content-Type" headers))))
    (message content-type)
    (cond ((string-match "text/html" content-type) (html-mode))
          ((string-match "text/xml" content-type) (xml-mode))
          ((string-match "text/javascript" content-type) (javascript-mode))
          ((string-match "application/x-javascript" content-type) (javascript-mode))
          ((string-match "text/css" content-type) (css-mode))
          ((string-match "application/json" content-type) (prettify-json-buffer))
          ((string-match "image" content-type) (image-mode))
          ))
  (redraw-display))

(defun http/handler (status)
  (let* ((response (buffer-string))
         (break-point (string-match "\n\n" response))
         (headers (http/parse-headers (substring response 0 break-point)))
         (body (substring response (+ break-point 2) (length response))))
    (with-current-buffer (get-buffer-create "http/*HEADERS*")
      (delete-region (point-min) (point-max))
      (insert (mapconcat (lambda (pair)
                           (format "%s: %s" (car pair) (cdr pair)))
                         headers "\n")))
    (when (bufferp "http/*BODY*")
      (kill-buffer "http/*BODY*"))
    (with-current-buffer (get-buffer-create "http/*BODY*")
      (delete-region (point-min) (point-max))
      (insert body)
      (http/body-mode headers))))

(defun http/post ()
  (interactive)
  (let ((url-request-method "POST")
        (url-request-extra-headers '(("Content-Type" . "application/x-www-form-urlencoded"))))
    (url-retrieve (buffer-string) 'http/handler)))

(defun http/get ()
  (interactive)
  (let ((url-request-method "GET"))
    (url-retrieve (buffer-string) 'http/handler)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-auto-show-menu 0.01)
 '(ac-delay 0.01)
 '(ac-modes
   (quote
    (emacs-lisp-mode lisp-mode lisp-interaction-mode slime-repl-mode c-mode cc-mode c++-mode go-mode java-mode malabar-mode clojure-mode clojurescript-mode scala-mode scheme-mode ocaml-mode tuareg-mode coq-mode haskell-mode agda-mode agda2-mode perl-mode cperl-mode python-mode ruby-mode lua-mode ecmascript-mode javascript-mode js-mode js2-mode php-mode css-mode makefile-mode sh-mode fortran-mode f90-mode ada-mode xml-mode sgml-mode ts-mode sclang-mode verilog-mode coffee-mode sass-mode haml-mode)))
 '(ac-stop-words (quote ("end")))
 '(ac-use-fuzzy t)
 '(auto-indent-engine (quote keys))
 '(auto-indent-kill-line-at-eol nil)
 '(auto-indent-newline-function (quote reindent-then-newline-and-indent))
 '(auto-indent-next-pair-timer-geo-mean (quote ((default 0.0005 0))))
 '(auto-revert-verbose nil)
 '(backup-directory-alist (quote ((".*" . "~/.emacs.d/.backups"))))
 '(bookmark-default-file "~/.emacs.d/my/my-bookmarks.el")
 '(buffer-offer-save t)
 '(clean-buffer-list-delay-general 1)
 '(column-highlight-mode t)
 '(column-number-mode t)
 '(compilation-ask-about-save nil)
 '(create-lockfiles nil)
 '(crosshairs-overlay-priority 100)
 '(css-indent-level 2)
 '(css-indent-offset 2)
 '(default-frame-alist (quote ((name . "emacs-primary") (vertical-scroll-bars))))
 '(delete-old-versions t)
 '(delete-selection-mode t)
 '(dired-auto-revert-buffer (quote dired-directory-changed-p))
 '(dired-dwim-target t)
 '(dired-efap-initial-filename-selection nil)
 '(dired-recursive-deletes (quote top))
 '(display-time-mode t)
 '(ediff-version-control-package (quote vc))
 '(ediff-window-setup-function (quote ediff-setup-windows-plain))
 '(electric-pair-mode nil)
 '(electric-pair-skip-self nil)
 '(elscreen-display-tab nil)
 '(emms-playlist-default-major-mode (quote emms-playlist-mode))
 '(emms-source-file-default-directory "~/music/" t)
 '(emux-completing-read-command (quote ido-completing-read))
 '(emux-term-program "/bin/zsh")
 '(eshell-cd-shows-directory nil)
 '(eshell-cmpl-cycle-completions t)
 '(eshell-cmpl-cycle-cutoff-length 10)
 '(eshell-cmpl-expand-before-complete t)
 '(eww-search-prefix "https://duckduckgo.com/html/?ia=qa&q=")
 '(fringe-mode (quote (nil . 0)) nil (fringe))
 '(global-auto-complete-mode t)
 '(global-auto-revert-mode t)
 '(global-auto-revert-non-file-buffers t)
 '(global-hl-line-mode t)
 '(global-linum-mode nil)
 '(global-visible-mark-mode t)
 '(global-whitespace-mode nil)
 '(grep-command "grep -nH -e ")
 '(grep-find-command nil)
 '(grep-find-ignored-files
   (quote
    (".#*" "*.o" "*~" "*.bin" "*.lbin" "*.so" "*.a" "*.ln" "*.blg" "*.bbl" "*.elc" "*.lof" "*.glo" "*.idx" "*.lot" "*.fmt" "*.tfm" "*.class" "*.fas" "*.lib" "*.mem" "*.x86f" "*.sparcf" "*.dfsl" "*.pfsl" "*.d64fsl" "*.p64fsl" "*.lx64fsl" "*.lx32fsl" "*.dx64fsl" "*.dx32fsl" "*.fx64fsl" "*.fx32fsl" "*.sx64fsl" "*.sx32fsl" "*.wx64fsl" "*.wx32fsl" "*.fasl" "*.ufsl" "*.fsl" "*.dxl" "*.lo" "*.la" "*.gmo" "*.mo" "*.toc" "*.aux" "*.cp" "*.fn" "*.ky" "*.pg" "*.tp" "*.vr" "*.cps" "*.fns" "*.kys" "*.pgs" "*.tps" "*.vrs" "*.pyc" "*.pyo" "#*")))
 '(grep-find-template "find . <X> -type f <F> -exec grep <C> -nHI -e <R> {} +")
 '(grep-highlight-matches (quote auto))
 '(grep-template "grep <X> <C> -nH -e <R> <F>")
 '(grep-use-null-device nil)
 '(highlight-indentation-offset 2)
 '(hippie-expand-try-functions-list
   (quote
    (yas-hippie-try-expand try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-lisp-symbol-partially try-complete-lisp-symbol)))
 '(ido-auto-merge-delay-time 5)
 '(ido-decorations
   (quote
    ("
>> " "" "
   " "
   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
 '(ido-enable-flex-matching t)
 '(ido-everywhere t)
 '(ido-max-directory-size 500000)
 '(ido-mode (quote both) nil (ido))
 '(ido-ubiquitous-mode t)
 '(ido-use-virtual-buffers t)
 '(indent-tabs-mode t)
 '(indicate-buffer-boundaries (quote left))
 '(indicate-empty-lines t)
 '(inferior-lisp-program "sbcl" t)
 '(iswitchb-use-virtual-buffers t nil (recentf))
 '(itail-fancy-mode-line t)
 '(itail-open-fn (quote pop-to-buffer))
 '(itail-tail-flags "-n100 -f")
 '(js-indent-level 2)
 '(js2-auto-indent-p nil)
 '(js2-bounce-indent-p t)
 '(js2-instanceof-has-side-effects nil)
 '(js2-mirror-mode nil)
 '(js2-mode-show-strict-warnings nil)
 '(js2-strict-missing-semi-warning nil)
 '(js2-strict-trailing-comma-warning nil)
 '(jsx-indent-level 2)
 '(kill-ring-max 1000)
 '(kill-whole-line t)
 '(linum-delay t)
 '(linum-eager t)
 '(magit-branch-arguments nil)
 '(magit-branch-read-upstream-first t)
 '(magit-commit-all-when-nothing-staged (quote ask-stage))
 '(magit-completing-read-function (quote ido-completing-read))
 '(magit-default-tracking-name-function (quote magit-tracking-name-unfucked-with))
 '(magit-diff-arguments (quote ("--no-ext-diff")))
 '(magit-fetch-arguments (quote ("--prune")))
 '(magit-revert-buffers 2 t)
 '(magit-save-repository-buffers nil)
 '(magit-save-some-buffers nil)
 '(magit-set-upstream-on-push (quote askifnotset))
 '(midnight-delay "1:00am")
 '(midnight-mode t nil (midnight))
 '(multi-term-program "/bin/zsh" t)
 '(multi-term-scroll-show-maximum-output t)
 '(mumamo-chunk-coloring 10)
 '(nxml-child-indent 2)
 '(nxml-outline-child-indent 2)
 '(org-src-fontify-natively t)
 '(org-tree-slide-fold-subtrees-skipped t)
 '(org-tree-slide-header t)
 '(org-tree-slide-skip-outline-level 0)
 '(package-enable-at-startup t)
 '(package-selected-packages
   (quote
    (emms yasnippet docker dockerfile-mode paredit org-tree-slide rjsx-mode git-timemachine kill-ring-search wgrep js2-mode auto-complete dired-efap expand-region ido-ubiquitous isearch-symbol-at-point itail magit magit-filenotify move-dup multiple-cursors powerline slime smart-indent-rigidly smartparens smex stumpwm-mode visible-mark simp)))
 '(package-user-dir "~/.emacs.d/packages")
 '(proced-auto-update-flag t)
 '(proced-auto-update-interval 1)
 '(proced-format (quote long))
 '(require-final-newline (quote visit-save))
 '(ruby-align-chained-calls t)
 '(save-interprogram-paste-before-kill t)
 '(save-place t nil (saveplace))
 '(sgml-basic-offset 2)
 '(sh-indentation 2)
 '(show-paren-mode nil)
 '(show-smartparens-global-mode t)
 '(simp-completing-read-command (quote ido-completing-read))
 '(size-indication-mode t)
 '(smartparens-global-mode t)
 '(sp-autoescape-string-quote nil)
 '(sp-ignore-modes-list
   (quote
    (calc-mode dired-mode gnus-article-mode gnus-group-mode gnus-summary-mode ibuffer-mode magit-branch-manager-mode magit-commit-mode magit-diff-mode magit-key-mode magit-log-mode magit-reflog-mode magit-stash-mode magit-status-mode magit-wazzup-mode minibuffer-inactive-mode monky-mode sr-mode term-mode)))
 '(tab-width 2)
 '(term-buffer-maximum-size 100000)
 '(term-default-bg-color "#000000")
 '(term-default-fg-color "#FFFFFF")
 '(term-unbind-key-list (quote ("C-z" "C-x" "C-c" "C-h" "C-l" "<ESC>")))
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify)))
 '(transient-mark-mode t)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(url-debug t)
 '(vc-handled-backends (quote (RCS CVS SVN SCCS Bzr Hg Mtn Arch)))
 '(visible-mark-inhibit-trailing-overlay t)
 '(visible-mark-max 1)
 '(vlf-batch-size 102400)
 '(wgrep-auto-save-buffer t)
 '(whitespace-global-modes t)
 '(whitespace-line-column 800)
 '(yank-pop-change-selection t))

(deftheme selwyn
  "my theme")

(custom-theme-set-faces
 'selwyn
'(default ((t (:background "#050505" :foreground "#AAA" :height 100 :width normal :foundry "unknown" :family "dejavu sans mono")))))

(provide-theme 'selwyn)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "#000000" :foreground "#FFF" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 140 :width normal :foundry "unknown" :family "DejaVu Sans Mono"))))
 '(ac-completion-face ((t (:foreground "#555" :underline "#F0F"))))
 '(button ((t (:underline t))))
 '(cursor ((t (:background "#FF0" :foreground "#F00"))))
 '(dired-efap-face ((t (:underline "#0F0"))))
 '(ediff-current-diff-A ((t (:background "#100"))))
 '(ediff-current-diff-Ancestor ((t (:background "#010"))))
 '(ediff-current-diff-B ((t (:background "#001"))))
 '(ediff-current-diff-C ((t (:background "#015"))))
 '(ediff-even-diff-A ((t (:background "#311"))))
 '(ediff-even-diff-Ancestor ((t (:background "#131"))))
 '(ediff-even-diff-B ((t (:background "#113"))))
 '(ediff-even-diff-C ((t (:background "#135"))))
 '(ediff-fine-diff-A ((t (:background "#020"))))
 '(ediff-fine-diff-B ((t (:background "#020"))))
 '(ediff-fine-diff-C ((t (:background "#101"))))
 '(ediff-odd-diff-A ((t (:background "#111"))))
 '(ediff-odd-diff-Ancestor ((t (:background "#122"))))
 '(ediff-odd-diff-B ((t (:background "#212"))))
 '(ediff-odd-diff-C ((t (:background "#221"))))
 '(erc-prompt-face ((t (:foreground "red" :weight bold))))
 '(flymake-errline ((t (:background "#600"))))
 '(font-lock-builtin-face ((t (:foreground "#F0F"))))
 '(font-lock-comment-delimiter-face ((t (:inherit font-lock-comment-face :foreground "#f90"))))
 '(font-lock-comment-face ((t (:foreground "#888"))))
 '(font-lock-constant-face ((t (:foreground "#0F0"))))
 '(font-lock-function-name-face ((t (:foreground "#F90" :weight bold))))
 '(font-lock-keyword-face ((t (:foreground "#00afff" :weight bold))))
 '(font-lock-string-face ((t (:foreground "light green"))))
 '(font-lock-type-face ((t (:foreground "#ff5fff" :weight bold))))
 '(font-lock-variable-name-face ((t (:foreground "#FF0" :weight bold))))
 '(font-lock-warning-face ((t (:background "#ff0000" :foreground "#ffffff"))))
 '(fringe ((t (:background "#111" :foreground "#500"))))
 '(header-line ((t (:background "#000" :foreground "#FFF" :weight ultra-bold))))
 '(highlight ((t (:background "#330"))))
 '(highlight-indentation-face ((t (:background "#151515"))))
 '(hl-line ((t (:background "#001"))))
 '(ido-first-match ((t (:foreground "#FF0" :weight bold))))
 '(ido-only-match ((t (:foreground "#0F0" :weight extra-bold))))
 '(isearch ((t (:background "#220022" :foreground "#FF00FF"))))
 '(js2-function-param ((t (:foreground "green"))))
 '(lazy-highlight ((t (:background "#222222" :foreground "#FFFF00"))))
 '(link ((t (:foreground "#00afff" :underline t))))
 '(link-visited ((t (:foreground "#ff5fff" :underline t))))
 '(linum ((t (:foreground "#444"))))
 '(magit-diff-add ((t (:foreground "#0F0"))))
 '(magit-diff-added ((t (:foreground "#090"))))
 '(magit-diff-added-highlight ((t (:background "#010" :foreground "#0f0"))))
 '(magit-diff-context ((t (:foreground "#222"))))
 '(magit-diff-context-highlight ((t (:foreground "#444"))))
 '(magit-diff-del ((t (:foreground "#F00"))))
 '(magit-diff-file-heading-selection ((t (:inherit magit-diff-file-heading-highlight))))
 '(magit-diff-hunk-heading ((t (:background "#111" :foreground "#333"))))
 '(magit-diff-hunk-heading-highlight ((t (:background "#111" :foreground "#444"))))
 '(magit-diff-lines-boundary ((t (:box (:line-width 1 :color "#fff" :style released-button)))))
 '(magit-diff-lines-heading ((t (:foreground "#f09"))))
 '(magit-diff-removed ((t (:foreground "#900"))))
 '(magit-diff-removed-highlight ((t (:background "#100" :foreground "#F00"))))
 '(magit-item-highlight ((t (:background "#002"))))
 '(magit-section-highlight ((t (:background "#111"))))
 '(minibuffer-prompt ((t (:foreground "#09F" :weight bold))))
 '(mode-line ((t (:background "#111111" :foreground "#0F0" :weight bold))))
 '(mode-line-inactive ((t (:background "#111111" :foreground "#444"))))
 '(org-level-4 ((t (:inherit outline-4 :foreground "green"))))
 '(org-tree-slide-header-overlay-face ((t (:background "black" :foreground "white" :weight bold))))
 '(popup-face ((t (:background "#111" :foreground "#888"))))
 '(popup-menu-face ((t (:background "#111" :foreground "#0F0"))))
 '(popup-menu-selection-face ((t (:background "#111" :foreground "yellow"))))
 '(powerline-active1 ((t (:inherit mode-line :background "#1c1c1c" :foreground "#09f" :weight bold))))
 '(powerline-active2 ((t (:inherit mode-line :background "#050505" :foreground "#FF00FF" :weight bold))))
 '(powerline-inactive1 ((t (:inherit mode-line-inactive :background "#090909"))))
 '(powerline-inactive2 ((t (:inherit mode-line-inactive :background "#030303"))))
 '(regex-tool-matched-face ((t (:background "#020" :foreground "Orange" :weight bold))))
 '(region ((t (:background "#222"))))
 '(show-paren-match ((t (:background "#06F" :foreground "#000" :weight ultra-bold))))
 '(show-paren-mismatch ((t (:background "#F00" :foreground "white" :weight ultra-bold))))
 '(sp-pair-overlay-face ((t (:background "#111"))))
 '(sp-show-pair-match-face ((t (:background "#F0F"))))
 '(sp-show-pair-mismatch-face ((t (:background "red" :foreground "white"))))
 '(term-color-blue ((t (:background "royalblue" :foreground "royalblue"))))
 '(vertical-border ((((type x tty)) (:inherit mode-line-inactive :foreground "#333"))))
 '(visible-mark-face ((t (:background "#F0F"))))
 '(visible-mark-non-trailing-face0 ((t (:background "saddle brown" :underline t))) t)
 '(whitespace-empty ((t (:background "#100" :foreground "firebrick"))))
 '(whitespace-hspace ((t (:foreground "#555"))))
 '(whitespace-indentation ((t (:inherit nil :foreground "#400"))))
 '(whitespace-line ((t (:inherit default))))
 '(whitespace-newline ((t (:foreground "#111"))))
 '(whitespace-space ((t (:foreground "#555"))))
 '(whitespace-tab ((t (:foreground "#222"))))
 '(whitespace-trailing ((t (:foreground "#F00" :weight bold))))
 '(yas/field-highlight-face ((t (:background "#300")))))
